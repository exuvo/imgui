plugins {
    id 'java'
    id "org.jetbrains.kotlin.jvm"
    id "com.github.johnrengelman.shadow"
}

ext.moduleName = "$group.jogl"

dependencies {
//    implementation "$kot-stdlib-jdk8"
//    implementation project(':core')
//    implementation "${kx}.glm:glm:$glm_version"
//    implementation "$kx:uno-sdk:$uno_version"
//    implementation "$kx:gln:$gln_version"
//    implementation "$kx:kool:$kool_version"

    def joglVersion = '2.3.2'
    implementation "org.jogamp.gluegen:gluegen-rt-main:$joglVersion"
    implementation "org.jogamp.jogl:jogl-all-main:$joglVersion"

    [""].each {
//        String base = "org.lwjgl:lwjgl$it:$lwjgl_version"
//        implementation base
//        String natives = "$base:natives-$lwjgl_natives"
//        testRuntimeOnly natives
//        shadow natives
    }

    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

task lightJar(type: Jar) {
    archiveClassifier = 'light'
    from sourceSets.main.output
    exclude 'extraFonts'
    inputs.property("moduleName", moduleName)
//    manifest.attributes('Automatic-Module-Name': moduleName)
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives lightJar
    archives sourcesJar
//    archives javadocJar
}

shadowJar {
    exclude 'module-info.class'
    inputs.property("moduleName", moduleName)
//    manifest.attributes('Automatic-Module-Name': moduleName)
}

jar {
    inputs.property("moduleName", moduleName)
//    manifest.attributes('Automatic-Module-Name': moduleName)
}

shadowJar.archiveClassifier = 'all'

compileKotlin {
    kotlinOptions.jvmTarget = "11"
    destinationDir = compileJava.destinationDir
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "11"
    destinationDir = compileTestJava.destinationDir
}

compileJava {
    dependsOn(':compileKotlin')
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
                '--patch-module', "$moduleName=${sourceSets["main"].output.asPath}"]
        classpath = files()
    }
}

jar { duplicatesStrategy = DuplicatesStrategy.EXCLUDE }